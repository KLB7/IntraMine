Linker
========

The Linker service turns text into links where possible. It returns either a new version of the text with links in place, or, for CodeMirror-based displays, a JSON summary of the links and where they should go.

This is an IntraMine service, so it uses the swarmserver.pm module together with "%RequestAction" entries to handle requests from users and other servers, and JavaScript fetch() calls. However, it does not display web pages, and has no JavaScript.

Although the Linker can handle any number of lines of text, it's used by IntraMine's Viewer and Editor as an "on demand" service, to add links to text that is newly shown, either when a view of a file is brought up or after a scroll. Typically the view of a source or text file shows under 100 lines at a time, so the load on the Linker is fairly minimal.

Text that can be turned into a link includes:
 - a "sufficient path" to a local file (see next section)
 - the same, with a text heading, function name, or class name added (Viewer only)
 - quoted mentions of a heading, function, or class in the same file (Viewer only)
 - a web address starting with http or https
 - use X::Y in a Perl file (with metacpan or Editor links as appropriate, again Viewer only)

File autolinking works fully for files that are in directories listed in your version of IntraMine's data/search_directories.txt file. If a file hasn't been indexed, then you'll need to use a full path to get a link for it. It's worth repeating though that if a directory is of interest to you then you should include it in your search_directories.txt file. See "Build your Elasticsearch index and run IntraMine.txt" for details on building your Elasticsearch index.

Here we mainly go over local file links. You'll find more about autolinking in "Gloss.txt#Links".

What the Linker does differently
================================
IntraMine's Linker knows all file paths of interest on your system, and understands the notion of distance between your "referencing file" where you're typing, and the "target file" that you want to link to. Combined, this means you typically have to type only a file name in order to get a link when using the Viewer or Editor.

Let's get some terminology out of the way first:
**Referencing file**: the source or text file where you're typing, and want to have a link to a target file.
**Target file**: is the file you want to link to.
**Context**: this is the directory that holds the referencing file.
**File distance**: As you might guess, the "distance" between your referencing file and target file is just the number of directory moves up and down that it takes to go from one file to the other.
**Sufficient path**: a file name, plus optionally enough directory names in any order to uniquely identify a file. Plus optionally a drive letter (placed first so as not to confuse humans). For this to work properly, the file should be in a directory that's been indexed for Elasticsearch (as listed in your data/search_directories.txt file).

Here's an example of IntraMine's autolinking, in three parts.
1. Let's suppose you have a project folder "E:\projects\project51", and within it there is only one file called "SaveDialog.cpp". But you also have other project folders containing "SaveDialog.cpp" files. And suppose you're typing in a log file in the project51 folder, "E:\projects\project51\logs\Sept 2021.txt" and you enter
"...as seen in SaveDialog.cpp...".
Based on your context (the location of the log file) the closest match is the SaveDialog.cpp file in your "project51" folder, so the path to link to is the only SaveDialog.cpp in that folder, which might be "E:\projects\project51\src\ui\SaveDialog.cpp".

2. Now suppose you're still typing in the same log file but you want a link to the SaveDialog.cpp file in the project99 folder instead of the project51 folder, and again there's only one file called "SaveDialog.cpp" in the project99 folder, and there's only one project99 folder across your whole system. Then if you type
"...by comparison with project99\SaveDialog.cpp we have..."
it's reasonable to turn that into a link to the one instance of SaveDialog.cpp in the project99 folder, which might be "E:\projects\project99\src\ui\SaveDialog.cpp", or even "P:\older_projects\project99\source\SaveDialog.pp", doesn't matter as long as there's only one SaveDialog.cpp in a project99 folder system wide.

3. And finally, let's suppose there are two project99 folders in your file system, one on the E: drive and one on the P: drive, and you're still typing in the same log file on the E: drive. Then, if you type
"...by comparison with project99\SaveDialog.cpp we have..."
there are two potential full paths - but the one on the E: drive is "closer" to where you're typing, so that's the natural choice. If you really do want the P: drive version, then typing "P:\project99\SaveDialog.cpp" will pick that one.

How does IntraMine know all file paths of interest on your system? They're gathered when you index folders for searching. So the whole "instant search with Elasticsearch" thing is sneakily also about being able to do autolinking properly.

Main back-end Perl files
========================
 - intramine_linker.pl
 - reverse_filepaths.pm provides full file links for file names or partial or full paths to files.
 - win_wide_filepaths.pm is included here and in many other servers, to properly handle file names and paths that contain non-ASCII characters of the UTF-16 sort that Windows uses.
 
There are no associated JavaScript files.
 
Calling the Linker
==================
There are three main subs that respond to JavaScript requests: one for CodeMirror views, one for non-CodeMirror (mainly .txt and Perl) views, and a "one shot" that turns a single partial path into a full path.

intramine_linker.pl#CmLinks() is used for CodeMirror-based file displays, and expects its $formH->{'text'} argument to hold the text that wants links. It returns an array in JSON format that summarizes the links it finds. The structure of each array entry can be seen in intramine_linker.pl#DoCodeMirrorReps() - basically where in the text the link should go, and the replacement link proper.

intramine_linker.pl#NonCmLinks() also expects the text to be marked up in its its $formH->{'text'} argument. But it returns a copy of the text with the links in place. You can see how the replacement is done in intramine_linker.pl#DoTextReps(). In-place replacement is used for text, Perl, .md (standard markdown), .log, and .bat files.

Both CmLinks() and NonCmLinks() examine one line of text at a time from the perhaps multi-line text passed in, and then look especially for file extensions such as ".pl" that almost always identify the end of a file name. From there, they look backwards in the text for a maximal string that can be identified as part of a known file path. intramine_linker.pl#GetLongestGoodPath() calls reverse_filepaths.pm#FullPathInContextNS() on each candidate string to see if the string corresponds to a known file path, and as mentioned the longest candidate string wins.

In IntraMine, the Linker is called only through JavaScript. The routine is to call back to the Linker using fetch() with a "req=cmLinks" argument for text in a CodeMirror view, and "req=nonCmLinks" for text from a non-CodeMirror view.

Here's a summary of the main Linker subs and how they are triggered from JavaScript.
TABLE Linker subs and their JavaScript callers
Linker subroutine       	Linker %RequestAction	Called by	Purpose						JavaScript example
CmLinks				req|cmLinks	Viewer / Editor	Links for CodeMirror views	cmAutoLinks.js#addAutoLinks()
NonCmLinks			req|nonCmLinks		Viewer	Links for .txt and Perl views etc	autoLinks.js#addAutoLinks()
FullPathForPartial	req|autolink		Files	Single link for a partial path	files.js#openAutoLink()

Under the hood
==============

Autolink sequence overview
------------------
1. New lines of text come into view in a text view of a file generated by IntraMine's Viewer or Editor, either on load or after a scroll. For the Editor, links are cleared and visible links restored when editing pauses for a couple of seconds.
2. (JS) addAutoLinks() is called in response, and calls fetch() to retrieve link markup for all visible lines. Note there are two instances of addAutoLinks, one in cmAutoLinks.js for CodeMirror-based displays, and one in autoLinks.js for all other views that can have links.
2.1 For CodeMirror file displays, cmAutoLinks.js#addAutoLinks() sends a request containing "req=cmLinks". This calls intramine_viewer.pl#CmLinks(), passing all the lines of text received in $formH->{'text'}.
2.2 For non-CodeMirror displays, autoLinks.js#addAutoLinks() sends a request containing "req=nonCmLinks". This calls intramine_viewer.pl#NonCmLinks(), again passing all the text received.
3. Both CmLinks() and nonCmLinks() ultimately call AddWebAndFileLinksToLine(), which in turn eventually calls reverse_filepaths.pm#FullPathInContextNS() on each link candidate, with links constructed if a full path is found.
3.1 For CodeMirror displays, the links are returned as JSON and added as a markup overlay on top of the CodeMirror view - see cmAutoLinks.js#requestLinkMarkupWithPort().
3.2 For non-CodeMirror displays, the links replace file path mentions in the returned text - see autoLinks.js#requestLinkMarkupWithPort().
4. For all views the line numbers that have received links are remembered, and lines are only marked up or altered once. This is managed by autoLinks.js#rememberLinesSeen() and cmAutoLinks.js#rememberLinesSeen() etc, using the "lineSeen" array.

Stepping through text to find links
----------------------------------
We get down to brass tacks in intramine_linker.pl#AddWebAndFileLinksToLine(), which looks for linkable text on a single line.
AddWebAndFileLinksToLine() calls EvaluateLinkCandidates() to identify text that looks like links, and replacement links for the text. Then DoTextReps() or DoCodeMirrorReps() is called to do the replacement: DoTextReps() puts the links directly in the text to be returned, whereas DoCodeMirrorReps() constructs an array of positions and link text that will be returned as JSON to the calling JavaScript function, with links done in an overlay layer.

EvaluateLinkCandidates() loops over a line of text looking for text in quotes, or a potential file extension, or the http etc that can start a web link. Unquoted file links can all be identified easily enough by finding the file extension first, and then working backwards to accumulate the longest partial path that represents a valid file mention.

For a path to be "valid" it needs to be either a full path or a partial path that's a good match for an indexed path. Expansion of link text being checked to the longest compatible partial path is handled by RememberTextOrImageFileMention(), which in turn calls GetLongestGoodPath() to extend the link text leftwards from the file extension, calling FullPathInContextNS() at each step to see if it's a good path. GetLongestGoodPath() typically checks as far left as it can, to pick up the longest file mention.

reverse_filepaths.pm#FullPathInContextNS() sequence
---------------------------------------------------
reverse_filepaths.pm#FullPathInContextNS() is just a "clean up" wrapper on FullPathFromPartialOrFullPath(), which does the real work of identifying the best matching full path.

reverse_filepaths.pm#FullPathFromPartialOrFullPath() sequence
-------------------------------------------------------------
In reverse_filepaths.pm#FullPathFromPartialOrFullPath() the work of collecting full paths finally pays off. FullPathFromPartialOrFullPath() receives a partial path in "$partialPath", and the path of a context folder in "$contextDir", and returns either the best matching full path or an empty string. Recognition of a partial path happens in five steps:
1. Is $partialPath ($partialPath) a full path? Return  it.
2. ExactInContext(): Does $partialPath match fully on the right with a full path, and is there some overlap on the left between full path and $contextDir? Return the full path that has best overlap, shortest on a tie.
3. ExactFullPath(): Does $partialPath match fully on the right with a full path, ignoring context? Return first one found.
4. RelaxedInContext(): Do $partialPath folder names all match those in a full path, regardless of position, with some overlap on the left between full path and $contextDir? Return the full path that has best overlap, shortest on a tie.
5. RelaxedFullPath(): Do $partialPath folder names all match those in a full path, regardless of position, ignoring context? Return first one found.
If all of the above checks fail, return ''.
Note where the supplied $partialPath is ambiguous, the wrong path can be returned.

For a couple of examples of how links are detected, see
 - "Stealing from IntraMine.txt#Full path for partial path example"
 - "Stealing from IntraMine.txt#Another partial path example, without help from context"

API
=====
The Linker can handle requests to provide links for plain text, a signal to update its directory lists or completely rebuild them, and a request to test itself.

Provide links for text (non-CodeMirror displays)
---------------------------
This request comes from JavaScript, when new lines come into view in a file display. "Non CodeMirror" means mainly .txt and Perl.
**Action**: convert mentions of files to hyperlinks
**Request**: /?req=nonCmLinks&remote=[01]&allowEdit=[01]&useApp=[01]&text=textToAddLinksTo&peerAddress=$peer&path=$path&first=$firstVisibleLineNum&last=$lastVisibleLineNum
Note [01] stands for 0 or 1
TABLE arguments
Argument	Description
remote		1 if request doesn't come from the IntraMinePC
allowEdit	1 if an edit link is wanted as well
useApp		1 if edit link should use preferred editor instead of IntraMine's
text		plain text that wants markup with links
peerAddress	IP address of client
path		full path of file that wants the links
first		line number for first line in text
last		line number for last line in text
**Response**: the text, with file mentions replaced by hyperlinks
**For example**: see autoLinks.js#requestLinkMarkupWithPort()
**See also**: intramine_linker.ps#NonCmLinks(), "Stealing from IntraMine.txt#Those autolinks"


Provide links for text (CodeMirror displays)
-------------------------------
This request comes from JavaScript, when new lines come into view in a file being displayed with CodeMirror.
**Action**: create JSON describing hyperlinks associated with file mentions in text
**Request**: /?req=cmLinks&remote=[01]&allowEdit=[01]&useApp=[01]&text=textToAddLinksTo&peerAddress=$peer&path=$path&first=$firstVisibleLineNum&last=$lastVisibleLineNum
Except for "req=cmLinks" the arguments are the same as for non-CodeMirror just above.
**Response**: JSON describing hyperlinks associated with the text
**For example**: see cmAutoLinks.js#requestLinkMarkupWithPort()
**See also**: intramine_linker.ps#CmLinks(), "Stealing from IntraMine.txt#Those autolinks"

Provide one link for text
----------------------------
**Action**: turn a partial file path into a hyperlink
**Request**: Linker/?req=autolink&partialpath=the partial path
where "the partial path" is part or all of a file path, ending in a file name
**Response**: the full path to the file mentioned
**For example**: Linker/?req=autolink&partialpath=intramine/extract_method.pl
returns c:\perlprogs\intramine\extract_method.pl
**See also**: files.js#openAutoLink(), "Stealing from IntraMine.txt#Those autolinks"


Update directory lists
----------------------
**Action**: load additional full paths
**Request**: /?signal=reindex
**Response**: call reverse_filepaths.pm#LoadIncrementalDirectoryFinderLists() to load additional full paths from fullpaths2.out in the File Watcher service directory (see FILEWATCHERDIRECTORY in data/intramine_config.txt)
**For example**: intramine_filewatcher.pl#IndexChangedFiles() broadcasts "signal=reindex" whenever there are new file paths detected
**See also**: reverse_filepaths.pm#LoadIncrementalDirectoryFinderLists(), "Stealing from IntraMine.txt#4. a way of keeping the full paths list and partial paths list up to date"

Completely rebuild directory lists
-------------------------------
**Action**: a folder has been renamed, completely rebuild full file paths and notify Main when rebuild is complete
**Request**: /?signal=folderrenamed
**Response**: call reverse_filepaths.pm#ReinitDirectoryFinder() to completely reload list of all files and directories. Signal "backinservice" when done.
**For example**: intramine_filewatcher.pl#IndexChangedFiles() broadcasts "signal=folderrenamed" whenever a folder has been renamed
**See also**: reverse_filepaths.pm#ReinitDirectoryFinder(), "Stealing from IntraMine.txt#Folder renames"

Test
---------
**Action**: run service-level tests
**Request**: /test/ (GET)
**Response**: run test_programs/test_Linker.pl)
**For example**: triggered if Main is started with -t on the command line (eg by running bats/TEST_INTRAMINE.bat) and the count for Linker is set to 1 in data/serverlist_for_testing.txt
**See also**: Testing with IntraMine.txt, test_programs/test_Linker.pl

---
contents.txt
---


