ToDo
=====
2021-11-30 20_45_30-To Do.png

The ToDo server provides a simple Kanban-style todo list, with just enough features to make it useful. Most of it is done in JavaScript.

Main Perl file:
intramine_todolist.pl

Main JavaScript files:
todo.js
todoGetPutData.js
todoFlash.js

ToDo features
=============
Use the "Add/Edit a Task" area to enter the title, description, and date for a new task. Description and date are optional. Drag an existing task back here to edit it.

All tasks can be dragged around, both between lists and within one list. As you start dragging a task a "Drag Here to Delete" box will appear over on the right: drop a task there to delete it.

If you enthusiastically add a large number of tasks then the view will scroll, but it's best not to have so many tasks that scrolling is needed.

If you make your browser window wider all of the tasks will get wider.

I wrote little of this on the JavaScript side (though I did remove jQuery), and so I'll leave it to you to go through todo.js if you want an understanding of the basic ToDo list.

However, there's one problem to address that the original doesn't handle, and that's what to do if one person updates the ToDo list and other people are viewing the ToDo list on other computers at the same time. Ideally the views in all open ToDo browser tabs should refresh when anyone does a Save or even just drags items around. This is handled in todoGetPutData.js#putData(), which sends WebSocket messages so that all open ToDo browser tabs can notice a change has happened, and respond to a change by refreshing the view.

Gloss markdown can be used in ToDo items
----------------------------------------
IntraMine's approach to markdown is called Gloss. It's a minimal approach, targeted at intranet documents. For all the details, see "Gloss.txt".

The ToDo version of Gloss supports:
 - **bold** and *italic*, ***bold italic***, and *!*code fragments*!*
 - unordered or "bullet" lists, two levels
 - ordered or "numbered" lists, two levels
 - headings (three levels with =====, -----, ~~~~~ underlines)
 - special icons (such as FIXED or NOTE)
 - tables (see below)
 - links (see below).

If you're typing in a table, use "\t" as the cell separator instead of hitting the TAB key, since TAB will just advance you to the Due Date field. But you can paste in a regular Gloss table that uses TABs and it will work.

Links are restricted for ToDo items (by comparison with full autolinking as seen with IntraMine's Viewer for text files). Supported links for ToDo:
 - web links, as usual they must start with http: or https:
 - file links, but they must be full paths enclosed in single or double quotes, such as "C:\Common/images/animage.png" or "P:\project51\src/afile.cpp"
 - file links are supported for all source files and text files, and image files
 - directory links, also must be in quotes and full paths, eg "C:\Strawberry\perl\lib"
 - you do get the "pop up on hover" for image links, so if you pause your cursor over the image link a (possibly reduced) version of the image will appear. Images aren't shown inline in ToDo items because they are just too narrow.

Full autolinking as seen with the Viewer isn't implemented for ToDo, mainly because there's no useful "context" for ToDo items.

Please see also "Gloss.txt" if you haven't yet, you might enjoy using Gloss for your intranet documentation.

API
=========

Get ToDo items
----------------
**Action**: get JSON for all ToDo items (To Do, Doing, Done)
**Request**: /?req=getData
**Response**: full contents of the ToDo data file (stringified JSON)
**For example**: see todoGetPutData.js#getToDoData()
**See also**: intramine_todolist.pl#GetData()

Save ToDo items
----------------
**Action**: save JSON for all ToDo items
**Request**: POST
with contents
data=[all ToDo items in JSON format converted to text string]
**Response**: empty string, or error message if data could not be saved
**For example**: see todoGetPutData.js#putData()
**See also**: intramine_todolist.pl#PutData()

Broadcast overdue count
-----------------------
**Action**: broadcast a signal to all page services, the number of items overdue
**Request**: /?signal=allServersUp or /?signal=dayHasChanged
**Response**: request Main to broadcast "signal=todoCount&count=$overdueCount&name=PageServers"
where $overdueCount is the number of ToDo items overdue
**For example**: Main broadcasts a "dayHasChanged" at midnight - see intramine_main.pl#HandleDateChange()
**See also**: intramine_todolist.pl#HandleToDoSignal()

Get ToDo timestamp
------------------
**Action**: get time of last save of ToDo items
**Request**: /?req=getModDate
**Response**: time of last save of the ToDo data file, as returned by libs\win_wide_filepaths.pm#GetFileModTimeWide()
**For example**: /?req=getModDate is all there is to it
**See also**: intramine_todolist.pl#DataModDate()

Notify other ToDo pages that contents have changed
-----------------------------------------------
**Action**: save or move or delete a ToDo item: todoGetPutData.js#putData() is called in todo.js for these actions
**Request**: wsSendMessage("todochanged " + overdueCount); is sent to all IntraMine web pages
**Response**: a frontmost ToDo page will reload all items from disk. Other frontmost pages will refresh the overdue count shown after "ToDo" in the Navigation Bar
**For example**: see todoFlash.js
**See also**: todoGetPutData.js, todo.js



---
contents.txt
---
