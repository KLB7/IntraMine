Viewer
=======
2020-02-28 16_07_51-elasticsearcher.pm.png
The Viewer service provides HTML views of your source and text files. It kicks in when you click on a link in Search results, or the Files page, or a link in a view that you're looking at. These are all "regular" links as opposed to the links on the little pencil icons (edit1.png) that follow most regular links - those invoke the editor. 

This is an IntraMine server, so it uses the swarmserver.pm module together with "%RequestAction" entries to handle requests from users and other servers, and JavaScript XMLHttpRequest calls.

CodeMirror generates the basic views for most source files, but Perl and .txt files have their own custom views. ".txt" files are given the full Gloss treatment including a table of contents (see "Gloss.txt"), but all source and text files have  links to other indexed source and text files, images in indexed folders, web pages, and headers or classes or functions in the same document. Any short text selection will be highlighted throughout the document with occurrences marked in the scroll bar. If the view is arrived at as a result of clicking on a Search hit, search words will also be highlighted similarly, in different colors. Some source files also have a synchronized table of contents (Perl, Pod, C / C++, Go, JavaScript, CSS, Clojure, Erlang, OCaml, PHP, Python, Ruby, TypeScript, Rust, Java) - support for other languages is planned.

An attempt has been made to display views of .docx and PDF files, with indifferent results.

Links to image files (png gif jpg ico) are also supported. They're bracketed by little yellow hummingbirds (hoverright.png). An image link will also produce a view of the image behind the link if you pause your cursor over it.

Main back-end Perl files
-------------------
 - **intramine_viewer.pl** delivers the HTML for a file view (see FullFile() there). For text and Perl files, the view is mostly generated and delivered with the initial request: for CodeMirror views, just a skeleton of the page is delivered, and a "req=loadfile" XMLHttpRequest retrieves the file contents, for display by CodeMirror.
 - **win_wide_filepaths.pm** is included here and in many other servers, to properly handle file names and paths that contain non-ASCII characters of the UTF-16 sort that Windows uses.
 
 
Main front-end JavaScript files
--------------------------
CodeMirror-based views
~~~~~~~~~~~~~~~~~~~~~~
 - **cmViewerStart.js** starts things going by setting up a CodeMirror instance, and loading the file with loadFileIntoCodeMirror().
 - **codemirror.js** and other CodeMirror JavaScript files are included
 - **cmAutoLinks.js** calls the back-end intramine_linker.pl#CmLinks() to put file and other links on any text seen for the first time. For CodeMirror, the links are done using an overlay layer.
 - **tooltip.js** handles "image hovers", showing the image when the cursor stops over a link to an image.


Other (non-CodeMirror) source and text views
~~~~~~~~~~~
 - **viewerStart.js** handles a few little things to get a view started, such as resizing the main text element, but it's mainly concerned with managing highlights in the text and on the scrollbar for selected text, and for any initial highlights representing words that were searched for, if we arrive at the view from Search results.
 - **autoLink.js** calls back to intramine_viewer.pl#NonCmLinks() to insert file and other links directly into the displayed HTML when text is seen for the first time.
 - **tooltip.js** is also used for these views to handle "image hovers".

Related servers
---------------
TABLE
Short name			Main Perl file        		Description
Linker				intramine_linker.pl		provides links of all sorts, in response to an XMLHttpRequest
Search				intramine_search.pl		puts links to the Viewer on all of its search hits
Files				intramine_filetree.pl	shows directory lists, and all source and text files there have links to the Viewer
Editor				intramine_editor.pl		shows an editable display of a source or text file, brought up when the little pencil icon next to a regular Viewer link is clicked. The display and editing are managed by CodeMirror
Opener				intramine_open_with.pl	directs edit link clicks to your preferred editing app instead of IntraMine's built-in Editor, if IntraMine has been configured that way (see "Editing documents.txt")

Viewer configuration
--------------------
In intramine_config.txt:
---
COMMON_IMAGES_DIR	C:/common/images/
---
If you want to use a common folder for images now and then, you can drop them in this folder and they will be available in any View where you mention the image name.

There are other config values used by the Viewer, such as
CTAGS_DIR	C:/ctags-2019-01-18_5a2b65f8-x64
but these are normally set when installing IntraMine.

PDF and docx viewers
~~~~~~~~~~~~~~~~~~~~
You can set your preferred PDF or docx viewer in data/intramine_config.txt.
PDF viewer: set LOCAL_OPENER_PDF around line 175
Word docx viewer: set LOCAL_OPENER_WORD_DOCX around line 176

Viewer features
===============
Syntax highlighting
-------------------
CodeMirror generates the syntax highlighting for most files. Perl file highlighting is done using the Syntax::Highlight::Perl::Improved module, with pod being a special case (see pod2thml_intramine.pm). Markdown (.md) files are formatted using Text::MultiMarkdown. Text (.txt) files are formatted using Gloss, IntraMine's version of "markdown" as described in Gloss.txt - Gloss has true autolinking, an automatically generated table of contents and many other features you might find useful, with little or no overhead to memorize.

Table of contents
-----------------
2020-03-10 23_48_40-elasticsearcher.pm.png
As mentioned above, some views have an automatically generated table of contents down the left side. A small double-headed arrow at the top of the table allows collapsing/expanding, without altering your document position. Clicking on a table entry will of course jump you to the corresponding place in the main text, and the selected entry in the table of contents will change to keep up with the heading you're currently under as you scroll through the document.

In supported source files the entries in the table of contents are alphabetically ordered, and in text files the order is the same as in the document.

A click on a method or class etc name in the table of contents will normally take you to the corresponding item but with any leading comments also scrolled into view.

Autolinks
----------
The Viewer inserts the following kinds of links, with source and text file links expanded to full paths by the Linker (some file paths are made up):
TABLE Links inserted by the Viewer
Type                     					Example                     	Constraints/Overhead
Full local/NAS path		C:/Go/src/entity.go			None. Can be put in quotes.
Partial local/NAS path	src/entity.go				Must be indexed. Can be put in quotes.
File name				entity.go					Must be indexed. Can be put in quotes.
Location in file		"Gloss.txt#Links", "swarmserver.pm#MainLoop()"			Must be indexed, double quotes always work, leaving them off often works in .txt files but looks ugly.
Line in file		"Gloss.txt#87"					As for location.
Internal heading in .txt		"Image hovers"		Double quotes are required.
Internal function or class	searchSubmit(), GoogleSuggest			None.
Web						http://google.com			None. Can be quoted.
Note all link mentions can be enclosed in double quotes if desired, to improve visibility in the original text.

In Perl files, "use Module;" receives a Viewer link and a link to metacpan if it's a standard module, versus a Viewer link and an Editor link if it appears to be a module that you own. See the image at top of this file.

Details can be found in Gloss.txt. 

Image hovers
-------------
topnav.png
*Stop your cursor over the image name and it pops up.*

If you pause your cursor over the name of a linked image file, a view of the image will pop up. Move your mouse and it goes away. For more, see Gloss.txt. If you're viewing this file with IntraMine, or you're looking at Viewer.html from the Documentation/ folder, you've already seen some examples.

Hit and selection highlighting
------------
If your view comes from clicking on a link in Search results, the words you searched for will be highlighted in the view and down the scroll bar. You can toggle the initial highlighting with the "Hide/Show Initial Hits" button at the top of the view. In CodeMirror views, only the first 100 instances will be highlighted.

If you select a word or short phrase, it will be highlighted in the text and on the scroll bar. To cancel a highlight, click on a blank line or after a non-word character.

*Initial hit on search word "headingAboveContents" is pink, current selected text is blue, the other instance of it is marked in green.*
2019-11-30 20_09_10-intramine_status.pl.png

Position toggle
---------------
2019-11-30 16_41_10-elasticsearcher.pm.png
Sometimes you want to jump back and forth between two widely spaced positions in a document. The "Toggle" button does that. The positions must be separated by more than a page to count as two separate locations. You can fine-tune the two positions by scrolling up or down slightly, up to roughly plus or minus a page at each end at one time.

Full Gloss on text files
------------------------
Text files (.txt) are run through a Gloss preprocessor to give you all of the above, plus really easy-to-use tables, ordered and unordered lists, horizontal rules, italic and bold, and some extra emphasis for BUG and NOTE etc. Details are in Gloss.txt.

Editor links
-------------
The how-to is described in "Editing documents.txt", but in brief any local or NAS file can have a link to the editor of your choice, as configured in data/intramine_config.txt. So you can jump over to Eclipse or notepad++ or Visual Studio Code with one click. Or use IntraMine's built-in Editor if you're after making small simple edits.

Editor links appear as small pencils (edit1.png) to the right of regular links on files.

Under the hood
==============
Request Actions
----------------
The %RequestAction hash near the top of intramine_viewer.pl associates callbacks with patterns in incoming http requests.

For example:
 - "$RequestAction{'href'} = \&FullFile;" means call FullFile() if the URL contains the argument "href=path to a file". A web page is returned.
 - "$RequestAction{'req|loadfile'} = \&LoadTheFile;" will call LoadTheFile() if the request contains "req=loadfile", with additional arguments containing the path to the file etc. This is called for CodeMirror views to load the text into CodeMirror, and returns the full plain text of the file.

Server start and finish
-----------------------
1. Typically a Viewer (intramine_viewer.pl) is started in IntraMine's Main server by intramine_main.pl#StartServerSwarm(), which passes a Page name, Short name, main port, and assigned listening port to the Viewer instance. A typical command line:
 -- perl C:/...path.../intramine_viewer.pl Search Viewer 81 43126
2. Some initialization sets up a log file, prepares the ctags processor etc.
3. swarmserver.pm#MainLoop() is called, with a reference to the %RequestAction hash.
4. MainLoop() continues until the server is terminated, preferably with a polite "EXITEXITEXIT" request rather than a CTRL-C.

View load sequence
------------------
1. Browser receives request for a file view, eg 'http://localhost:81/Viewer/?href=C:/...path.../docs/notes.txt&searchItems=words+searched+for&rddm=22044/', where
 -- "href" holds the path to the file
 -- "searchItems" is optional, holding words searched for if the link was in Search hits
 -- "rddm" is probably useless, but I've left it in.
2. The Main server redirects the request to an instance of the Viewer, eg port 43126.
3. Request is received by swarmserver.pm#MainLoop(): "$RequestAction{'href'} = \&FullFile;" is registered as the "href" handler in intramine_viewer.pl, so FullFile() is called, with URL arguments passed along in the "$formH" hash, eg $formH->{'href'} = "C:/...path.../docs/notes.txt"
4. FullFile() returns HTML with CSS and JavaScript appropriate for the file, through a call to intramine_viewer.pl#GetContentBasedOnExtension(). The Viewer has separate handling for HTML, images, PDF, Word, Perl, pod, text, markdown, go, all other languages supported by CodeMirror with ctags (.cpp .js etc), and finally those supported by CodeMirror but not ctags (eg .textile). 
4.1 For views handled by CodeMirror, the file contents are requested after loading by cmViewerStart.js#loadFileIntoCodeMirror().
4.2 For views not handled by CodeMirror, FullFile() returns the entire file contents in the HTML response.
5. After "loading complete" in the browser, addAutoLinks() is called to turn all source and text file mentions into links. For CodeMirror-based views, cmViewerStart.js#loadFileIntoCodeMirror() calls cmAutoLinks.js#addAutoLinks() after the text has loaded. For non-CodeMirror views (.txt .pl and a few others), viewerStart.js#reJumpAndHighlight() calls autoLinks.js#addAutoLinks() on the browser's "load" event. For details on how and when autolinks are loaded, see "Linker.txt#Autolink sequence".

Gloss processing
---------------
Full Gloss processing is applied only to text files, by intramine_viewer.pl#GetPrettyTextContents(). File and web links are added after loading for all files including text files, as described in "Linker.txt#Autolink sequence".

Gloss processing happens in several passes through the text:
 - table of contents generation, either during other processing (.txt etc, see eg intramine_viewer.pl#GetPrettyTextContents()) or separately by calling exuberant ctags (.go etc, see intramine_viewer.pl#GetCTagsTOCForFile())
 - emphasis (bold, italic), ordered/unordered lists, horizontal rules, headings, and Perl module mentions
 - TABLE handling (.txt only)  - see intramine_viewer.pl#PutTablesInText()
 - internal links, referencing headings in the current document.
 - external links (autolinks) are added after the view is loaded to the browser window, see Linker.txt for details.

Non-text files receive limited Gloss processing, mainly autolinks for source, text, image, and web mentions. And views for supported languages (see above) receive a table of contents, and links on names of functions and classes defined in the file.

API
=====
Display a file
--------------
**Action**: display a source or text file, with table of contents. For files displayed with CodeMirror, the text loaded after the page loads, see "Load contents of file" just below
**Request**: 
*RESTful*: Viewer/file/$viewerPath$anchorWithNum
where $viewerPath is a file path, such as "C:/files/afile.txt", and $anchorWithNum is an optional heading, class, or function/method within the file, such as "#OpenFile" or "#OpenFile()"
*Argument-based*: Viewer/?href=$viewerPath$anchorWithNum
with $viewerPath and $anchorWithNum as above
**Response**: HTML for display of the requested file, as generated by intramine_viewer.pl#FullFile(). Note for CodeMirror-based displays the text contents are filled in later: see "Load contents of file" just below. For other displays (mainly .txt and Perl files) the text is returned in the initial HTML by FullFile()
**For example**: http://192.168.1.132:43127/Viewer/?href=C:/perlprogs/IntraMine/libs/win_wide_filepaths.pm#FindFileWide()
or more RESTfully
http://192.168.1.132:43127/Viewer/file/C:/perlprogs/IntraMine/libs/win_wide_filepaths.pm#FindFileWide
(The parentheses after FindFileWide are optional.)
**See also**: intramine_linker.pl#GetTextFileRep(), viewerLinks.js#openView(), intramine_viewer.pl#FullFile(), Linker.txt.

Load contents of file
---------------------
**Action**: load the text of a file into a CodeMirror display
**Request**: /?req=loadfile&file=PathToFile
**Response**: the full plain text of the source file, ready for putting in CodeMirror
**For example**: http://localhost:43125/?req=loadfile&file=C:/temp/afile.cpp
**See also**: cmViewerStart.js#loadFileIntoCodeMirror(), intramine_viewer.pl#LoadTheFile()

Test
---------
**Action**: run service-level tests
**Request**: /test/ (GET)
**Response**: run test_programs/test_Viewer.pl)
**For example**: triggered if Main is started with -t on the command line (eg by running bats/TEST_INTRAMINE.bat) and the count for Viewer is set to 1 in data/serverlist_for_testing.txt
**See also**: Testing with IntraMine.txt, test_programs/test_Viewer.pl


---
contents.txt
---
