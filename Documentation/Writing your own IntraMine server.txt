Writing your own IntraMine server
=================================

API support
===========
An IntraMine service supports callbacks based on names in a URL, such as "/Search/" or "/fruit/", and arguments such as "req=redirect" or "fruitname=apple", as well as distinguishing GET, POST, and DELETE methods. It's enough for IntraMine's purposes and might be enough for you.

The DBX example server (explored below) shows how to set up a simple RESTful style server that handles a table of fruit names and their ratings. It has one end point named "fruit" and all requests to add, update, or delete a fruit entry from its database table are handled with a single sub, HandleFruitRequest(). The callback setup for this is
---
$RequestAction{"/fruit/"} = \&HandleFruitRequest;
---
and HandleFruitRequest() receives arguments common to all IntraMine callbacks that supply needed details.

For example, POST DBX/fruit/cherry/5 will add "cherry" to the fruit table, with a rating of 5. HandleFruitRequest() will look at its $formH hash argument for $formH->{'METHOD'} and see that the value is "post", then pull "cherry" and "5" from the URL and make the entry.

Example servers to build on
===========================
There are two example servers you can start from, to write your own server from scratch:
 - intramine_boilerplate.pl: as simple as you can get, it just serves up one static page. Take a look at this one first, so you'll know what "boilerplate" code to include at the top of your server
 - intramine_db_example.pl: a simple database example, using Perl's standard DBM::Deep package to put a few entries in a table and display them. (DBM::Deep - a pure Perl multi-level hash/array DBM that supports transactions).

And of course you have the dozen or so other servers provided with IntraMine to steal from. Here are the most promising candidates to build on:
 - intramine_todolist.pl manages a Kanban-style ToDo list. It's fairly small, and relies on JavaScript to do most of the work. todoGetPutData.js (with todo.js) shows how to go from JSON data in a disk file to a web page and back again using XMLHttpRequest().
 - intramine_uploader.pl, also fairly small, implements uploading a file to the box where IntraMine is running. Its associated JavaScript file uploader.js shows how to do a POST request to IntraMine using XMLHttpRequest().
 
Getting started on your own server
==================================
First, decide which of three different kinds of server it will be, and pick a name for it:
 - do you want your server to have an entry in the top navigation bar, and produce a web page when your user clicks on its entry there? That's a top level Page server, like Search, Files etc. In its data/serverlist.txt entry, the Page name and Short name should be the same and unique.
 - will it be called by some user action in a top level server? That's a "second level" server, like Viewer. In serverlist, the Page name should be the name of the top level server it's associated with, and its Short name should be different from that, and unique.
 - will it just lurk behind the scenes as a single instance? That's a BACKGROUND server, like FILEWATCHER. In serverlist.txt, its Page name and Short name should be different and unique, with "BACKGROUND" appended in the Option column.

Here are example entries from data/serverlist.txt for supplied servers:
Top level Page server, showing the Search form and search hits:
1	Search				Search		intramine_search.pl
A second level server for Search, used to display read-only file views:
1	Search				Viewer		intramine_viewer.pl
A background server, monitoring file system changes:
1	FILEWATCHER			Watcher		intramine_filewatcher.pl	BACKGROUND

You'll find it easiest to use the following standard locations when saving files for your new server:
TABLE Standard file locations
Type					Location
Main Perl file			at the top level of your IntraMine folder
Supporting .pm modules	libs/
CSS						css_for_web_server/
JavaScript				js_for_web_server/
images					images_for_web_server/
fonts					fonts_for_web_server/


The DBX example server
----------------------
2019-12-22 18_52_10-Example of DB access.png

Let's walk through the DBX server, which is a small example of a top level server. It has an entry in the top navigation bar, and a page it generates when you click on its name in the bar. The page shows a form for entering fruit names, and a rating for each fruit, followed by a table showing all fruit ratings. There is a small db holding the fruit names and ratings behind the scenes. Buttons are there to add/update or delete a fruit, so full CRUD.

The entry for it in data/serverlist.txt is
---
1	DBX					DBX			intramine_db_example.pl
---
indicating that it's a top level server (Page name and Short name agree, and it's not marked as "BACKGROUND").

The main back-end file is **intramine_db_example.pl**.  Open that now in an editor, and let's take a look.

TABLE intramine_db_example.pl (DBX) lines
Location		Whazzup
54..76		This is standard "boilerplate" that you can copy to your new server (except for the "use DBM::Deep" which is just there for the example's little database)."use swarmserver" brings in the swarmserver.pm module that will handle the tedious parts of web communications (listening for HTTP requests, responding, broadcasting to other IntraMine servers etc).
60			"use common" has some subs that you might find useful, take a look at libs/common.pm to see for yourself.
61		"use swarmserver" brings in the **swarmserver.pm** module that will handle the tedious parts of web communications (listening for HTTP requests, responding, broadcasting to other IntraMine servers etc).
65..69		SSInitialize() in swarmserver.pm loads configuration values, including any specifically for your server. To pull in configuration values for your server, add a file to the data/ folder whose name is the Short name of your server followed by "_config.txt". The format is Key<tabs>Value. The DBX server has its own config file, called DBX_config.txt. SSInitialize() also sets variables holding your server's Page name, Short name, IntraMine's Main port, and the listening port for the current (DBX) server.
71..76		This sets up server feedback, which can be just a print to the console window, or to a file, or both. Set $kLOGMESSAGES to 1 to log all Output() calls. The log file will be in logs/IntraMine/, with Short name, port, and date in the name, eg ".../logs/IntraMine/DBX 43133 2019-12-31-15-02.txt" 
80..101		Specific to the example server, these lines set up our little fruit database, you won't need them in your server.
113..116	The **%RequestAction** hash keys hold strings that swarmserver.pm will look for when requests come in, and the values hold addresses of subroutines to call in response. %RequestAction has its own description below.
116		"$RequestAction{'/test/'} = \&SelfTest;" says this server can run tests. See "Testing" below.
125		"MainLoop(\%RequestAction);" passes control to swarmserver.pm, which listens for requests and calls corresponding subs as listed in %RequestAction.
151..250		OurPage() is called by swarmserver.pm in response to a request to show the DBX page. OurPage() returns the full HTML for the page, including script tags to load some CSS and JavaScript.
214	spinner.js controls the golden spinning globe that appears on the right of the navigation bar when a page is loading. It turns into a question mark when the page has loaded. Each page controls when this happens, and for DBX it's a call to db_example.js#turnOffTheLoadingSpinner() when the page has loaded.
215	websockets.js implements client-side WebSockets. Sending a message is simple, wsSendMessage("Your message here") will do the job. Receiving messages requires setting up a callback - see "IntraMine communications" for details.
216	todoFlash.js sets up callbacks to handle WebSockets messages involving the ToDo server. In DBX, receiving a "todoflash" messages triggers a "flash" of the ToDo item in the navigation bar. Again, there's more about this below under "IntraMine communications".
217	chatFlash.js flashes the "Chat" item in the nav bar for message from the Chat service.
218	tooltip.js contains showhint(), which can pop up a "tool tip" when the cursor stops over an item it's attached to. It's not used in DBX, but you can find a couple of simple examples of using showhint() in intramine_boilerplate.pl, and it's also used in IntraMine's Viewer to display images ("image hover").
219	db_example.js contains XMLHttpRequest() calls to add or delete a fruit, and refresh the display of the fruits table. These all go to the same end point, ".../DBX/fruit/", using the POST, DELETE, or GET method in the usual RESTful way. "HandleFruitRequest()" detects which method was used, see just below.
250		"PutPortsAndShortnameAtEndOfBody(\$theBody);" injects three JavsScript variables at the bottom of the HTML in $theBody. These are needed in intramine_config.js (line 211), which contains a sub to call back to Perl to retrieve an IntraMine configuration value from its key. For an example call, see spinner.js at the bottom.
255..295		HandleFruitRequest() handles get/post/delete requests sent to the /DBX/ API entry point for this server, as set up on line 115 with "$RequestAction{"/$APINAME/"} = \&HandleFruitRequest;" where $APINAME is "fruit" by default. A typical post to add a fruit would be "HTTP...POST.../DBX/fruit/Raspberry/3/". Not of course code you need to copy, it's there as an example if you like the RESTful approach.

The main front-end file for DBX is **db_example.js**. Open that up and we'll take a quick tour of the good bits.

TABLE db_example.js (DBX) lines
Location		Whazzup
47..76			The addFruitSubmit() function uses an XMLHttpRequest to POST a new fruit name and rating back to intramine_db_example.pl, where 
 	$RequestAction{"/$APINAME/"} = \&HandleFruitRequest;
 	recognizes that it's a POST and calls AddOrUpdateFruit(... $fruitName, $rating).
81..111			refreshFruitDisplay() is very like addFruitSubmit(), but uses GET as the send method instead of POST.
134..159		deleteOneFruit() similarly does an XMLHttpRequest using DELETE.
161..168		When everything is loaded we start things off properly here by resizing the main content div, stopping the load spinner, registering a callback to use if the window is resized, and finally showing the main content with refreshFruitDisplay() - the same function is also called when a fruit is added or deleted.

%RequestAction and subroutine arguments
-----------------------------------
Your server should set up a %RequestActon hash to set up the correspondence between requests received and subroutines to generate responses.

As a typical entry, DBX on line 113 has
$RequestAction{'req|main'} = \&OurPage;
This is triggered by a request such as
http:/localhost:port/DBX/?req=main

Note a pipe '|' is used rather than '=' when declaring a parameter-based "this=that" action.

To set up a "RESTful" action for an entry point name, put '/' before and after the name. DBX has an API entry point named "fruit", and the corresponding %RequestAction is
$RequestAction{"/fruit/"} = \&HandleFruitRequest;

OurPage() in DBX is a typical action, declared as
---
sub OurPage {
	my ($obj, $formH, $peeraddress) = @_;
---
and returning an HTML web page.

Actions such as OurPage() all have the same three parameters:
1. $obj: the raw HTTP request. For DBX "req=main" it would be "/DBX/?req=main"
2. $formH: all "this=that" parameters in the HTTP request, such as $formH->{'req'} = "main".
3. $peeraddress: IntraMine's LAN IP address (eg 192.168.1.132).

"$formH" also holds the method used for the request in $formH->{'METHOD'}. Values can be 'get', 'post', or 'delete'.

For an example involving $formH->{'METHOD'} see DBX's intramine_db_example.pl#HandleFruitRequest(), which handles get, post, and delete requests for the fruit database.

For an example involving more concrete parameters than "this=that", see 

Adding a serverlist entry to run your new server
====================================================
Open data/serverlist.txt and add an entry there for your new server. For example:
For a top level server that has an entry in the top navigation bar;
1	NewServer	NewServer	newserver.pl
For a "second level" server that is called by a top level server;
1	NewServer	NewServerMovies	ns_movies.pl
For a background server;
1	NEWSERVER	NEWSERVER	newserver.pl	BACKGROUND

If you plan on having tests for your new server, add the same entry to data/serverlist_for_testing.txt. Set the Count field there to 1 if you want to test your new server when you run bats/TEST_INTRAMINE.txt, and 0 otherwise.

Your own configuration file
===========================
Each server can have its own configuration file, consisting of key/value pairs separated by one or more tabs. The configuration file's name should be the Short name of the server followed by "_config.txt". And it should be saved in IntraMine's data/ folder.

For example, the DBX server has its own config file, data/DBX_config.txt.

The Short name is entered as the third entry on the server's line in data/serverlist.txt (and also data/serverlist_for_testing.txt if you have tests for the server). For example, the entry in serverlist.txt for IntraMine's Editor is
1	Search				Editor		intramine_editor.pl
and the Short name for it is "Editor".

WebSockets
==============
IntraMine's WebSockets server (Short name 'WS', intramine_websockets.pl) provides a broadcast of any message received to all clients that are listening. These include all browser clients that show an IntraMine navigation bar, and all IntraMine servers (if the Perl program uses swarmserver.pm, it's an IntraMine server).

WebSockets messages sent from web client to web client (using JavScript) are always very fast. WebSockets messages sent from a Perl server, however, can take a couple of seconds to go through, so they should be used sparingly.

You'll find some examples of WebSockets usage in the next section.

IntraMine communications
=========================

Summary
----------
For talking to a web client (browser web page generated by an IntraMine service), use WebSockets. For talking to an IntraMine service, use HTTP.

Web client JavaScript can send and receive WebSockets messages.
They can also receive WebSockets messages from your Perl program.
However, Perl programs cannot receive WebSockets messages. That's because when it comes to event loops There Can Be Only One, and all of your IntraMine Perl servers are running an event loop for HTTP messages (swarmserver.pm#MainLoop()).
So, if a web client needs to send a message back to an IntraMine server, use HTTP on both ends.
And if an IntraMine server needs to send a message to another IntraMine server, use HTTP on both ends.
That was a bit abstract, now we'll get down to specifics.

1. Web client to web client: use websockets.js#wsSendMessage() to send, and register a callback with websockets.js#addCallback() to receive.
2. Perl server to web client: use intramine_websockets_client.pm#WebSocketSend() to send, and websockets.js#addCallback() to receive. Note however that this will typically tie your server up for a couple of seconds.
3. Web client to Perl server: use AJAX on the JS side to send, and a callback in %RequestAction on the Perl side to receive
4. Perl server to server: use swarmserver.pm#RequestBroadcast() to send, and a callback in %RequestAction on the Perl side to receive (see intramine_status.pl#54 for a 'signal' callback).

1. Web client to web client
---------------------------
Modern browsers are very good at handling WebSockets, so you can pretty much send and receive as many messages as you want between web clients.

1. Use WebSockets in the JavaScript for send or receive or both in your client. As an example we'll use the reporting of any change on any open ToDo page to all open IntraMine web pages: when any page with an IntraMine navigation bar receives the "todoflash" message it briefly changes the appearance of the ToDo nav bar item. And then you know there's something new to do:)

1.1 Put <script src="websockets.js"></script> in the source of the pages that want to send or receive messages. A WebSockets connection to the WS server is automatically established. This is done for all non-BACKGROUND IntraMine servers, see for example intramine_todolist.pl#166.
 Each server with a navigation bar in Intramine handles the "todoflash" message by also including
 <script src="todoFlash.js"></script>
 which handles the flashing and the registration of the flashNavBar() callback in a self-contained way. This is done for example by the DBX server at intramine_db_example.pl#215.
1.2 Decide what the message will be. It can have variable content, but the left part of the message must be fixed. That's because the leftmost part of the message will serve as the "trigger" for your JavaScript callback function. For example, activity messages in IntraMine have the trigger "activity" and the actual message always begins with that, followed by details such as port etc. To make your message unique across the whole system, you can start it off with the Short name of your server. For the ToDo flash, the trigger is "todoflash" and that's also the entire message.
1.3 Write a JavaScript function to serve as your callback that receives the full message as its only argument. For todoflash the function is todoFlash.js#flashNavBar().
1.4 Register a callback for the JS function that will handle receiving the message. Do this registration in a separate function called registerXXCallback (or Callbacks if more than one). The exact name doesn't matter, it should just be unique to avoid collisions with other "register" functions. In the function, call
 addCallback("trigger", callback);
 For the ToDo flash, todoFlash.js#registerToDoCallbacks() contains
 addCallback("todoflash", flashNavBar);
 (and another callback we're ignoring here).
1.5 Add the line
 window.addEventListener('wsinit', function (e) { registerXXCallback(); }, false);
 somewhere, to call your registerXXCallback function at an appropriate time. The 'wsinit' custom event is defined in websockets.js. For the ToDo flash, the 'wsinit' listener is at the bottom of todoFlash.js, the same file that defines the flashNavBar() callback and contains the registration function registerToDoCallbacks(). The line is
 window.addEventListener('wsinit', function (e) { registerToDoCallbacks(); }, false);
1.6 And of course we want to send a message that triggers the callback. This is done with
 wsSendMessage("the message");
 somewhere in your JavaScript.
 For ToDo flashing, the call is wsSendMessage("todochanged");, called in todoGetPutData.js#putData() when the changed ToDo data is being POSTed back to the ToDo server.

The Chat service (intramine_chat.pl, chat.js, chatFlash.js, chat.css) offers another example of using WebSockets.

2. Perl server to web client
-----------------------------
Perl servers can send WebSockets messages, but with the setup and teardown it can take a couple of seconds to send the message. So they are best used sparingly, and sent after your server has done the work that needs to be done quickly. IntraMine uses WebSockets in the Watcher server (intramine_filewatcher.pl) to notify any open Status page that a file has changed, by calling swarmserver.pm#ReportActivity(): this happens at the end of intramine_filewatcher.pl#IndexChangedFiles() after file lists have been updated and files re-indexed, etc. If you need this, here's how.

2. Use intramine_websockets_client.pm#WebSocketSend() to send, and websockets.js#addCallback() to receive. We'll use the sending of an "activity" message from the Watcher server (intramine_filewatcher.pl) to any open Status web page as an example. When a Status page receives an "activity" message for a Perl server, it flashes the "LED" for that server.
 
 The web client callback part, and thinking up a message to send, and a trigger for it, are the same as for "1. Web client to web client" just above, so we'll focus here on the Perl side of things, where the WebSockets message is sent from.
 
2.1 Put "use swarmserver;" in your Perl server to be able to use WebSockets. Then put
 WebSocketSend("the message");
 wherever you need it.
 The "activity" calls in IntraMine are done in swarmserver.pm#ReportActivity(), by
 WebSocketSend('activity ' . $name . ' ' . $port);
 where "$name" is the server's short name, and "$port" is the port it's running on.
 But your server can call WebSocketSend() anywhere it wants.
 As mentioned, intramine_filewatcher.pl#IndexChangedFiles() calls ReportActivity() at the end, after all the work is done.
2.2 On the JavaScript side, you will need a callback to handle your message. See "1. Web client to web client" just above for the details on that.
 The Status server sets up a callback to the JS function "activity()" in statusEvents.js, and registers the callback there too. It's just a twelve-line file. The function that handles the "activity" message for Status is status.js#showActivity(), which flashes the "LED" for the server on the Status page.
 "activity" messages in IntraMine have the trigger "activity" and the actual message always begins with that, followed by details, for example "activity Viewer 43126".

3. Web client to Perl server
----------------------------
This is done using HTTP, with an XMLHttpRequest() request on the JavaScript side, and a callback on the Perl server side. If XMLHttpRequest() is new to you, you might enjoy reading "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" first.

3. You'll want HTTP at both ends. In the web client, your JavaScript will use an XMLHttpRequest(). And on the Perl end, you will use a callback sub registered as an entry in the "%RequestAction" hash for your server. As an example, we'll look at the DBX server (DataBase eXample, intramine_db_example.pl and db_example.js), which uses this approach to update the fruit database.
3.1 Your approach can be RESTful or not, as you please. The DBX example is RESTful, with a single endpoint handling GET/POST/DELETE requests. Adding a fruit, for example is done with the HTTP request "http://n.n.n.n:81/DBX/fruit/fruitname/fruitrating/", sent with POST. If you read through db_example.js#refreshFruitDisplay(), db_example.js#addFruitSubmit(), db_example.js#deleteOneFruit(), you'll see how to send GET, POST, and DELETE requests from your client.
 (For an example using "thisKey=thatValue" parameters in the request see the next section.)
3.2 On the Perl server side, you'll need a sub to do the work, and an entry in the %RequestAction hash that triggers your sub.
 In the DBX server, the single sub to handle CRUD requests for the fruit database is registered with
 $RequestAction{"/fruit/"} = \&HandleFruitRequest;
 where "fruit" is the same api endpoint name used on the JavaScript side to send XMLHttpRequests.
3.3 Your sub to handle requests should take exactly the same parameters as intramine_db_example.pl#HandleFruitRequest(), namely
 my ($obj, $formH, $peeraddress) = @_;
 where
  $obj holds the entire request. See HandleFruitRequest() for how to parse it
  $formH holds the HTTP method as $formH->{'METHOD'} with possible values 'GET', 'POST', 'DELETE'. It also holds all "x=y" entries in the request, as $formH{'x'} == 'y'.
  $peeraddress is the address of the sending client, not much needed.
 
4. Perl server to server
-------------------------
RequestBroadcast("the message") in the sender and a %RequestAction handler in the receiver can be used for **one-way** message sending between IntraMiner servers.

RequestBroadcast works best with "thisthing=thatvalue" argument pairs: your %RequestAction handler can use one of them as the "trigger", and one or more other pairs as data. Separate the pairs by '&' in the message.

You can send the message selectively to specific servers using a "name=X" pair, where "X" is either the Short name of a server or a Page name. Short names and Page names for your servers can be found in data/serverlist.txt.

Here's a complete example, a 'weather' report sent from some server to all servers with Page name or Short name 'Weather', as signalled by 'name=Weather':

*In your server sending the message*:
---
		# Send to the (Short name or Page name) 'Weather' server(s):
		RequestBroadcast("name=Weather&trigger=weather&info_category=weather stats&details=北京 87 degrees, partly cloudy");
---

*In your (Short name or Page name) Weather server receiving the message*:
---
# Put this near the top, right after "my %RequestAction;":
# (note the '|' instead of '=', it's needed for reasons lost in the mists of time)
$RequestAction{'trigger|weather'} = \&HandleWeatherReport; # "trigger=weather"

# The weather message handler:
sub HandleWeatherReport {
	my ($obj, $formH, $peeraddress) = @_; # REQUIRED ARGUMENTS
	
	if (defined($formH->{'trigger'}) && $formH->{'trigger'} eq 'weather')
		{
		if (defined($formH->{'info_category'}) && defined($formH->{'details'}) &&
		$formH->{'info_category'} eq 'weather stats')
			{
			print("WEATHER MESSAGE: |$formH->{'details'}|\n");
			}
		else
			{
			print("NO MESSAGE!\n");
			}
		}
	}
---

The "trigger" parameter doesn't have to be called "trigger", it can be anything you want. In IntraMine you'll find "signal" used in a few places, for example.

If the %RequestAction in the above example was just
$RequestAction{'trigger'} = \&HandleWeatherReport;
(leaving out '|weather')
then it would be called for any 'trigger=...' message, eg '&trigger=sport news'. In other workds, if you leave out the value for your trigger then any value will match.

If we left out 'name=Weather' in the above example, the message would be sent to all IntraMine servers. No errors would be generated, servers that don't have a %RequestAction to handle a specific message will just ignore it.

No direct reply is possible from the receiving server to the sending server, but you can use
  RequestBroadcast("the reply");
to respond, and a %RequestAction handler back on the sending server to handle the response. That's a bit stateless, so if you want to track which reply goes with which message you'll need to do a bit of extra work. For example, you could put a unique identifier '&message_id=37891' in each original message, and send it back in the reply, then have your sending server's request handler look for $formH->{'message_id'}. IntraMine doesn't currently need responses to messages so I don't have a full example, but I bet you can figure out the other details on your own:)


Testing
=======
See "Testing.txt" for details on how to take advantage of IntraMine's approach to testing your own servers and supporting modules. For modules it's just a standard approach (use "Test::More" and "prove"). For servers there's a bit more help, to put up web pages and check what they contain.

---
contents.txt
---